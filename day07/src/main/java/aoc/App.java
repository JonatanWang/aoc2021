/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package aoc;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.*;
import java.util.stream.Collectors;

public class App {
    private final List<Integer> input;

    public App(List<Integer> input) {
        this.input = input;
    }

    public Integer getSolutionPart1() {
        int res = Integer.MAX_VALUE;
        // Get all to distinguished numbers
        Set<Integer> set = new HashSet<>(input);

        /**
         * Calculate sum of distances
         * from each position to
         * the aligned point/distinguished numbers in the set
         */
        for (Integer alignPoint : set) {
            var minDistance = 0;
            for (Integer position : input) {
                minDistance += Math.abs(position - alignPoint);
            }
            res = minDistance < res ? minDistance : res;
        }

        return res;
    }

    public Integer getSolutionPart2() {
        int res = Integer.MAX_VALUE;
        // Get all to distinguished numbers
        Set<Integer> set = new HashSet<>(input);
        var min = Collections.min(set);
        var max = Collections.max(set);
        /**
         * Calculate sum of distances
         * from each position to
         * the aligned point/distinguished numbers in the set
         */
        for (var alignPoint = min; alignPoint <= max; alignPoint ++) {
            var minDistance = 0;
            for (Integer position : input) {
                var distanceFromPositionToAlignPoint
                        =  getSumByArithmeticSequence(position, alignPoint);
                System.out.println("distance from " + position +
                        " to " + alignPoint + " = " + distanceFromPositionToAlignPoint);
                minDistance += distanceFromPositionToAlignPoint;
                System.out.println("min distance " + minDistance);
            }
            res = minDistance < res ? minDistance : res;
            System.out.println("res " + res);
        }

        return res;
    }

    private int getSumByArithmeticSequence(Integer a, Integer b) {
        var n = Math.abs(a - b);
        var res = n * (1 + n) / 2;

        return res;
    }

    public static void main(String[] args) throws IOException {
        System.out.println("java");
        List<Integer> input = parseInput("input.txt");
        String part = System.getenv("part") == null ? "part1" : System.getenv("part");
        if (part.equals("part2"))
            System.out.println(new App(input).getSolutionPart2());
        else
            System.out.println(new App(input).getSolutionPart1());
    }

    private static List<Integer> parseInput(String filename) throws IOException {
        var list = Arrays.stream(Files.lines(Path.of(filename))
                                        .map(s -> s.split(","))
                                        .findFirst()
                                        .get()
                        )
                        .map(Integer::parseInt)
                        .collect(Collectors.toList());

        return list;
    }
}