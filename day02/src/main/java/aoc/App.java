/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package aoc;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.stream.Collectors;

public class App {
    private final List<Command> input;

    public App(List<Command> input) {
        this.input = input;
    }

    public Integer getSolutionPart1() {
        int res = 0, cntForward = 0, cntUp = 0, cntDown = 0;
        for (Command c : input) {
            switch (c.getAction()) {
                case "forward":
                    cntForward += c.getDistance();
                    break;
                case "up":
                    cntUp -= c.getDistance();
                    break;
                case "down":
                    cntDown += c.getDistance();
                    break;
                default:
                    break;
            }
        }
        var depth = cntDown + cntUp;
        res = depth * cntForward;

        return res;
    }

    public Integer getSolutionPart2() {
        int res = 0, horizontal = 0, cntUp = 0, cntDown = 0, depth = 0, aim = 0;
        for (Command c : input) {
            switch (c.getAction()) {
                case "forward":
                    horizontal += c.getDistance();
                    depth += c.getDistance() * aim;
                    break;
                case "up":
                    aim -= c.getDistance();
                    break;
                case "down":
                    aim += c.getDistance();
                    break;
                default:
                    break;
            }
        }
        res = depth * horizontal;

        return res;
    }

    public static void main(String[] args) throws IOException {

        List<Command> input = parseInput("input.txt");
        String part = System.getenv("part") == null ? "part1" : System.getenv("part");
        if (part.equals("part2"))
            System.out.println(new App(input).getSolutionPart2());
        else
            System.out.println(new App(input).getSolutionPart1());
    }

    private static List<Command> parseInput(String filename) throws IOException {
        return Files.lines(Path.of(filename))
                .map(Command::parseString)
                .collect(Collectors.toList());
    }
}