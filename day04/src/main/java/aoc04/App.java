/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package aoc04;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Stack;
import java.util.stream.Collectors;

public class App {
    private final List<Board> boards;
    private final List<Integer> numbers;

    public App(List<Integer> numbers, List<Board> boards) {
        this.numbers = numbers;
        this.boards = boards;
    }

    public Integer getSolutionPart1() throws Exception {
        var searchResult = findBingoBoardIndexAndTriggerNumber();
        var bingoBoard = boards.get(searchResult[0]);
        var triggerNumber = searchResult[1];
        System.out.println("Trigger " + triggerNumber);
        var sumOfUnmarkedNumbers = bingoBoard.getSumOfUnmarkedNumbers();
        System.out.println("Sum Unmarked: " + sumOfUnmarkedNumbers);
        return sumOfUnmarkedNumbers * triggerNumber;
    }

    public int[] findBingoBoardIndexAndTriggerNumber() throws Exception {
        for (var i = 0; i < numbers.size(); i ++) {
            for (var j = 0; j < boards.size(); j ++) {
                var currentBoard = boards.get(j);
                currentBoard.markNumber(numbers.get(i));
                var triggerNumber = numbers.get(i);
                if (currentBoard.isBingo()) {
                    return new int[]{j, triggerNumber};
                }
            }
        }
        throw new Exception("No bingo board found!");
    }

    public Integer getSolutionPart2() throws Exception {
        var searchResult = findLastBingoBoardIndexAndTriggerNumber();
        var bingoBoard = boards.get(searchResult[0]);
        var triggerNumber = searchResult[1];
        System.out.println("Trigger " + triggerNumber);
        var sumOfUnmarkedNumbers = bingoBoard.getSumOfUnmarkedNumbers();
        System.out.println("Sum Unmarked: " + sumOfUnmarkedNumbers);

        return sumOfUnmarkedNumbers * triggerNumber;
    }

    private int[] findLastBingoBoardIndexAndTriggerNumber() {
        try {
            for (var i = 0; i < numbers.size(); i ++) {
                var triggerNumber = numbers.get(i);
                for (var j = 0; j < boards.size(); j ++) {
                    var currentBoard = boards.get(j);
                    var hadBingoBefore = currentBoard.isBingo();
                    currentBoard.markNumber(triggerNumber);
                    var hasBingoNow = currentBoard.isBingo();

                    if (!hadBingoBefore && hasBingoNow && isAllBoardsBingo()) {
                        return new int[]{j, triggerNumber};
                    }
                }
            }

        } catch (Exception e) {
          e.printStackTrace();
        }
        return null;
        //throw new Exception("No bingo board found!");
    }

    private boolean isAllBoardsBingo() {
        return boards.stream().allMatch(board -> board.isBingo());
    }

    public static void main(String[] args) throws Exception {

        var numbers = getNumbers("input.txt");
        var boards = getBoards("input.txt");
        String part = System.getenv("part") == null ? "part1" : System.getenv("part");

        if (part.equals("part2"))
            System.out.println(new App(numbers, boards).getSolutionPart2());
        else
            System.out.println(new App(numbers, boards).getSolutionPart1());
    }

    public static List<Integer> getNumbers(String filename) throws IOException{
        var firstLine = Files.readAllLines(Paths.get(filename)).get(0).split(",");
        var numbers = Arrays.stream(firstLine).map(s -> Integer.valueOf(s))
                .collect(Collectors.toList());

        return numbers;
    }

    private static List<Board> getBoards(String filename) throws IOException {
        var boards = new ArrayList<Board>();
        var boardLines = Files.readAllLines(Paths.get(filename));
        boardLines.remove(0); // Remove the first line of random numbers
        /**
         * Remove blank lines
         */
        for (var i = 0; i < boardLines.size(); i ++) {
            if (boardLines.get(i).isBlank()) boardLines.remove(i);
        }
        for (var i = 0; i < boardLines.size(); i += 5) {
            var newBoard =new Board(boardLines.subList(i, i + 5));
            boards.add(newBoard);
        }

        return boards;
    }
}