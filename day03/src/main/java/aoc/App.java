/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package aoc;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class App {
    private final List<char[]> input;

    public App(List<char[]> input) {
        this.input = input;
    }

    public Integer getSolutionPart1() {

        var res = 0;
        var reportLength = input.size();
        var recordLength = input.get(0).length;
        var digitCnt = new int[recordLength];
        Arrays.fill(digitCnt, 0);

        for (char[] record: input) {
            for (var i = 0; i < record.length; i ++) {
                switch (record[i]) {
                    case '1':
                        digitCnt[i] ++;
                        break;
                    default:
                        break;
                }
            }
        }
        var gammaRateByBit = new char[recordLength];
        var epsilonRateByBit = new char[recordLength];
        for (var i = 0; i < digitCnt.length; i ++) {
            gammaRateByBit[i] = digitCnt[i] < reportLength /  2 ?  '0' : '1';
            epsilonRateByBit[i] = digitCnt[i] < reportLength /  2 ?  '1' : '0';
        }

        int  gammaRate = 0, epsilonRate = 0;
        for(int i = 0; i < recordLength; i ++) {
            if (gammaRateByBit[i] == '1') {
                gammaRate += Math.pow(2, recordLength - 1 - i);
            }
            if (epsilonRateByBit[i] == '1') {
                epsilonRate += Math.pow(2, recordLength - 1 - i);
            }
        }

        res = gammaRate * epsilonRate;

        return res;
    }

    public Integer getSolutionPart2() {
        var cnt = 0;

        return cnt;
    }

    public static void main(String[] args) throws IOException {

        List<char[]> input = parseInput("input.txt");
        String part = System.getenv("part") == null ? "part1" : System.getenv("part");
        if (part.equals("part2"))
            System.out.println(new App(input).getSolutionPart2());
        else
            System.out.println(new App(input).getSolutionPart1());
    }

    private static List<char[]> parseInput(String filename) throws IOException {
        return Files.lines(Path.of(filename))
                .map(String::toCharArray)
                .collect(Collectors.toList());
    }
}