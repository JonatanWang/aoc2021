/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package aoc;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class App {
    private final List<aoc.Board> boards;
    private final List<Integer> numbers;

    public App(List<Integer> numbers, List<aoc.Board> boards) {
        this.numbers = numbers;
        this.boards = boards;
    }

    public Integer getSolutionPart1() {
        int res;
        var bingoBoard = new aoc.Board();
        boolean hasFoundBoard = false;
        int triggerNumber = 0;
        for (var i = 0; i < numbers.size(); i ++) {
            if(hasFoundBoard) {break;}
            for (var j = 0; j < boards.size(); j ++) {
                if(hasFoundBoard) {break;}
                var currentBoard = boards.get(j);
                var points = currentBoard.getPoints();
                for (var k = 0; k < 5; k ++) {
                    if(hasFoundBoard) {break;}
                    for (var l = 0; l < 5; l ++) {
                        if(hasFoundBoard) {break;}
                        var currentPoint = points[k][l];
                        if (currentPoint.isMarked() == false && currentPoint.getValue() == numbers.get(i)) {
                            currentPoint.setMarked(true);
                            triggerNumber = currentPoint.getValue();

                            // Check if currentBoard is Bingo
                            if (currentBoard.isBingo()) {
                                bingoBoard = currentBoard;
                                hasFoundBoard = true;
                                System.out.println("Has found ? " + hasFoundBoard);
                                break;
                            }
                        }
                    }
                }
            }
        }

        /**
         * Loop bingo board and get the sum of values of unmarked points
         */
        var sumOfUnmarkedNumbers = 0;
        var pointsOfBingoBoard = bingoBoard.getPoints();
        for (var i = 0; i < 5; i ++) {
            for (var j = 0; j < 5; j ++) {
                if (pointsOfBingoBoard[i][j].isMarked() == false) {
                    sumOfUnmarkedNumbers += pointsOfBingoBoard[i][j].getValue();
                }
            }
        }
        System.out.println("Sum: " + sumOfUnmarkedNumbers);
        res = sumOfUnmarkedNumbers * triggerNumber;

        return res;
    }

    private boolean isBingo(aoc.Board board) {
        var res = false;
        var points = board.getPoints();
        for (var i = 0; i < 5; i ++) {
            if ((points[i][0].isMarked() == true &&
                    points[i][1].isMarked() == true &&
                    points[i][2].isMarked() == true &&
                    points[i][3].isMarked() == true &&
                    points[i][4].isMarked() == true) ||
                    (points[0][i].isMarked() == true &&
                            points[1][i].isMarked() == true &&
                            points[2][i].isMarked() == true &&
                            points[3][i].isMarked() == true &&
                            points[4][i].isMarked() == true)){

                res = true;
            }
        }

        return res;
    }

    public Integer getSolutionPart2() {
        var res = 0;

        return res;
    }

    public static void main(String[] args) throws IOException {

        var numbers = getNumbers("input.txt");
        var boards = getBoards("input.txt");
        String part = System.getenv("part") == null ? "part1" : System.getenv("part");

        if (part.equals("part2"))
            System.out.println(new App(numbers, boards).getSolutionPart2());
        else
            System.out.println(new App(numbers, boards).getSolutionPart1());
    }

    private static List<Integer> getNumbers(String filename) throws IOException{
        var firstLine = Files.readAllLines(Paths.get(filename)).get(0).split(",");
        var numbers = Arrays.stream(firstLine).map(s -> Integer.valueOf(s))
                .collect(Collectors.toList());

        return numbers;
    }

    private static List<aoc.Board> getBoards(String filename) throws IOException {
        var boards = new ArrayList<aoc.Board>();
        var boardLines = Files.readAllLines(Paths.get(filename));
        boardLines.remove(0); // Remove the first line of random numbers
        /**
         * Remove blank lines
         */
        for (var i = 0; i < boardLines.size(); i ++) {
            if (boardLines.get(i).isBlank()) boardLines.remove(i);
        }

        for (var i = 0; i < boardLines.size(); i += 5) {
            var points = new aoc.Point[5][5];
            var cnt = i;
            for (var j = 0; j < 5; j ++) {
                var currentLine = new ArrayList<String>();
                var currentLineArray = boardLines.get(cnt).split(" ");
                var regex = "\\d+";
                for (String s : currentLineArray) {
                    if (s.matches(regex)) {
                        currentLine.add(s);
                    }
                }
                cnt ++;
                var numbersOfCurrentLine = currentLine.stream().map(s -> Integer.parseInt(s)).collect(Collectors.toList());
                for (var k = 0; k < 5; k ++) {
                    points[j][k] = new aoc.Point(numbersOfCurrentLine.get(k).intValue(), false);
                }
            }
            boards.add(new aoc.Board(points));
        }

        return boards;
    }
}